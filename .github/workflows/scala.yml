# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Scala CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [producer, spark-streaming-app] # Microservices

    steps:
    # Step 1: Check out the repository
    - name: Check out the repository
      uses: actions/checkout@v4

    # Step 2: Set up JDK 11 for Scala builds
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: sbt

    # Step 3: Set up SBT
    - name: Set up SBT
      uses: olafurpg/setup-scala@v10
      with:
        sbt-version: '1.10.4'  # Ensure this matches your build.properties

    # Step 4: Build assembly JAR for Scala-based microservices
    - name: Build assembly JAR for ${{ matrix.service }}
      if: matrix.service == 'spark-streaming-app'
      run: |
        cd kappa/${{ matrix.service }}
        sbt clean assembly

    # Step 5: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 6: Build and push Docker images
    - name: Build and push Docker image for ${{ matrix.service }}
      run: |
        docker build -t ${{ secrets.DOCKER_USER }}/websocket-${{ matrix.service }}:latest -f ./kappa/${{ matrix.service }}/Dockerfile .
        docker push ${{ secrets.DOCKER_USER }}/websocket-${{ matrix.service }}:latest
